name: Cut Release (from main)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (SemVer, e.g. v0.1.0)"
        required: true
        type: string
      publish_containers:
        description: "Also push images to GHCR (requires Dockerfiles or Jib)"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

env:
  SERVICES: "api-gateway user-management bank-accounts bills"

jobs:
  prepare-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure we are cutting from latest main
        run: |
          git fetch origin main --prune
          git checkout main
          git pull --ff-only

      - name: Validate tag availability
        run: |
          TAG="${{ inputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."; exit 1
          fi

      - name: Create and push tag
        run: |
          TAG="${{ inputs.version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  build-artifacts:
    needs: prepare-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Build all modules
        run: mvn -B -ntp -DskipTests package

      - name: Collect build outputs
        run: |
          mkdir -p release-artifacts
          for S in $SERVICES; do
            if [ -d "$S/target" ]; then
              # Grab the fat jar if present; else any jar
              JAR=$(ls -1 "$S"/target/*-SNAPSHOT.jar "$S"/target/*-exec.jar "$S"/target/*.jar 2>/dev/null | head -n1 || true)
              if [ -n "$JAR" ]; then
                cp "$JAR" "release-artifacts/${S}-${{ inputs.version }}.jar"
              fi
              # Always include the full target dir as a fallback artifact
              tar -C "$S" -czf "release-artifacts/${S}-target-${{ inputs.version }}.tar.gz" target
            fi
          done
          # Checksums
          (cd release-artifacts && sha256sum * > CHECKSUMS.txt)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: Finance Hub ${{ inputs.version }}
          generate_release_notes: true
          files: |
            release-artifacts/*

  ghcr-images:
    if: ${{ inputs.publish_containers }}
    needs: prepare-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ "api-gateway", "user-management", "bank-accounts", "bills" ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Package (skip tests)
        working-directory: ${{ matrix.service }}
        run: mvn -B -ntp -DskipTests package

      # If you have Dockerfiles in each service directory:
      - name: Build & push (Dockerfiles)
        working-directory: ${{ matrix.service }}
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/finance-hub-${{ matrix.service }}"
          docker build -t "$IMAGE:${{ inputs.version }}" -t "$IMAGE:${{ github.sha }}" .
          docker push "$IMAGE:${{ inputs.version }}"
          docker push "$IMAGE:${{ github.sha }}"
